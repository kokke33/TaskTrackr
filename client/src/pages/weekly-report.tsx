import { useParams } from "wouter";
import { FormProvider } from "react-hook-form";
import { Button } from "@/components/ui/button";
import type { WeeklyReport } from "@shared/schema";
import { Send, ShieldCheck } from "lucide-react";
import { useState, useEffect } from "react";
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import rehypeRaw from 'rehype-raw';
import { Card, CardContent } from "@/components/ui/card";
import { FormField, FormItem, FormLabel, FormControl } from "@/components/ui/form";
import { Textarea } from "@/components/ui/textarea";
import { AIAnalysisResult } from "@/components/ai-analysis-result";

import { useWeeklyReportForm } from "@/hooks/use-weekly-report-form";
import { useReportAutoSave } from "@/hooks/use-report-auto-save";
import { useMeetingMinutesGenerator } from "@/hooks/use-meeting-minutes-generator";
import { useAIAnalysis } from "@/hooks/use-ai-analysis";
import { useWebSocket } from "@/contexts/useWebSocket"; // Êñ∞„Åó„ÅÑ„Éë„Çπ„Å´Â§âÊõ¥
import { EditingUsersIndicator } from "@/components/editing-users-indicator";
import { useFormPerformance } from "@/hooks/use-performance";
import { useToast } from "@/hooks/use-toast";

import { ReportHeader } from "@/components/weekly-report/report-header";
import { BasicInfoForm } from "@/components/weekly-report/basic-info-form";
import { TaskDetailsSection } from "@/components/weekly-report/task-details-section";
import { MeetingMinutes } from "@/components/weekly-report/meeting-minutes";
import { MilestoneDialog } from "@/components/milestone-dialog";
import { SampleReportDialog } from "@/components/sample-report-dialog";
import { NavigationConfirmDialog } from "@/components/navigation-confirm-dialog";
import { VersionConflictDialog } from "@/components/version-conflict-dialog";
import { ConflictResolutionDialog } from "@/components/conflict-resolution-dialog";
import { useNavigationGuard, NavigationGuardAction } from "@/hooks/use-navigation-guard";

export default function WeeklyReport() {
  const { id } = useParams<{ id: string }>();
  const [showMilestoneDialog, setShowMilestoneDialog] = useState(false);
  const [showSampleDialog, setShowSampleDialog] = useState(false);
  const [navigationDialog, setNavigationDialog] = useState<{
    open: boolean;
    targetPath: string;
    resolve: (action: NavigationGuardAction) => void;
  } | null>(null);
  const [isSavingForNavigation, setIsSavingForNavigation] = useState(false);
  const [latestAutoSaveVersion, setLatestAutoSaveVersion] = useState<number | undefined>(undefined);
  
  // Ë©≥Á¥∞„Å™Á´∂ÂêàËß£Ê±∫„ÅÆ„Åü„ÇÅ„ÅÆstate
  const [showDetailedConflictDialog, setShowDetailedConflictDialog] = useState(false);
  const [conflictServerData, setConflictServerData] = useState<WeeklyReport | null>(null);
  const [isTransitioningToDetailedConflict, setIsTransitioningToDetailedConflict] = useState(false);

  // „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÁõ£Ë¶ñ
  const { measureFormOperation, measureRender } = useFormPerformance('WeeklyReport');
  const { toast } = useToast();

  const formHook = useWeeklyReportForm({ id, latestVersionFromAutoSave: latestAutoSaveVersion });
  const {
    form,
    isEditMode,
    isAdminEditMode,
    reportId,
    existingReport,
    isLoadingReport,
    cases,
    isLoadingCases,
    latestReport,
    selectedCaseId,
    setSelectedCaseId,
    isSubmitting,
    onSubmit,
    copyFromLastReport,
    // Á´∂ÂêàÁÆ°ÁêÜÈñ¢ÈÄ£
    hasVersionConflict,
    conflictDetails,
    resolveConflict,
    clearConflictState,
    checkVersionConflict,
  } = formHook;

  // [DEBUG] hasVersionConflictÁä∂ÊÖã„ÅÆÂ§âÂåñ„ÇíËøΩË∑°
  useEffect(() => {
    console.log('üî• [weekly-report] hasVersionConflict state changed:', {
      hasVersionConflict,
      conflictDetails,
      timestamp: new Date().toISOString()
    });
  }, [hasVersionConflict, conflictDetails]);

  const autoSaveHook = useReportAutoSave({ 
    form, 
    isEditMode, 
    id,
    currentVersion: existingReport?.version,
    onVersionConflict: async (message: string) => {
      // Êñ∞„Åó„ÅÑÁ´∂ÂêàËß£Ê±∫„Ç∑„Çπ„ÉÜ„É†„Çí‰ΩøÁî®
      checkVersionConflict();
    }
  });
  
  // Ëá™Âãï‰øùÂ≠ò„Éï„ÉÉ„ÇØ„Åã„Çâ„ÅÆ„Éê„Éº„Ç∏„Éß„É≥Êõ¥Êñ∞„ÇíÁõ£Ë¶ñ
  useEffect(() => {
    if (autoSaveHook.version !== latestAutoSaveVersion) {
      console.log(`üîÑ [weekly-report] Updating latest auto-save version: ${autoSaveHook.version}`);
      setLatestAutoSaveVersion(autoSaveHook.version);
    }
  }, [autoSaveHook.version, latestAutoSaveVersion]);
  const {
    lastSavedTime,
    isAutosaving,
    formChanged,
    version,
    handleManualAutoSave,
    handleImmediateSave,
    updateVersion,
    resetConflictResolving,
  } = autoSaveHook;

  const meetingMinutesHook = useMeetingMinutesGenerator({ reportId, isEditMode });
  const aiAnalysisHook = useAIAnalysis();
  
  // WebSocketÊé•Á∂ö„Å®„É™„Ç¢„É´„Çø„Ç§„É†Á∑®ÈõÜÁä∂Ê≥ÅÁÆ°ÁêÜ
  const { lastMessage, sendMessage, status, editingUsers, currentUserId } = useWebSocket();

  // WebSocket„ÅÆ„Çπ„ÉÜ„Éº„Çø„Çπ„Åå'open'„Å´„Å™„Å£„Åü„ÇâÁ∑®ÈõÜÈñãÂßã„ÇíÈÄöÁü•
  useEffect(() => {
    if (status === 'open' && isEditMode && reportId) {
      console.log('[WeeklyReport] Conditions met, starting editing...', { reportId });
      sendMessage({ type: 'start_editing', reportId: reportId });

      // „Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„Åå„Ç¢„É≥„Éû„Ç¶„É≥„Éà„Åï„Çå„Çã„Åã„ÄÅÊù°‰ª∂„ÅåÂ§â„Çè„ÇãÊôÇ„Å´Á∑®ÈõÜÁµÇ‰∫Ü
      return () => {
        console.log('[WeeklyReport] Cleanup effect, stopping editing...', { reportId });
        sendMessage({ type: 'stop_editing', reportId: reportId });
      };
    }
  }, [isEditMode, reportId, status]); // sendMessage„Çí‰æùÂ≠òÈÖçÂàó„Åã„ÇâÈô§Âéª

  // lastMessage „ÇíÁõ£Ë¶ñ„Åó„Å¶Á∑®ÈõÜ„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÇíÊõ¥Êñ∞
  useEffect(() => {
    if (lastMessage) {
      // WebSocketProvider„ÅßÊó¢„Å´Âá¶ÁêÜ„Åï„Çå„Å¶„ÅÑ„Çã„Åü„ÇÅ„ÄÅ„Åì„Åì„Åß„ÅØËøΩÂä†Âá¶ÁêÜ„ÅÆ„Åø
      // ÂøÖË¶Å„Åß„ÅÇ„Çå„Å∞„ÄÅ„Åì„Åì„ÅßËøΩÂä†„ÅÆ„É≠„Ç∏„ÉÉ„ÇØ„ÇíÂÆüË£Ö
      console.log('[DEBUG] weekly-report.tsx: lastMessage received:', lastMessage);
    }
  }, [lastMessage]);

  // [DEBUG] editingUsers „ÅÆÂ§âÊõ¥„ÇíÁõ£Ë¶ñ
  useEffect(() => {
    console.log('[DEBUG] weekly-report.tsx: editingUsers state updated:', {
      editingUsers,
      currentUserId,
      currentUserIdType: typeof currentUserId,
      editingUsersLength: editingUsers.length
    });
    
    if (editingUsers.length > 0) {
      editingUsers.forEach((user, index) => {
        console.log(`[DEBUG] editingUser[${index}]:`, {
          userId: user.userId,
          userIdType: typeof user.userId,
          username: user.username,
          isCurrentUser: user.userId === currentUserId,
          startTime: user.startTime,
          lastActivity: user.lastActivity
        });
      });
      
      // „Éï„Ç£„É´„Çø„É™„É≥„Ç∞ÁµêÊûú„ÅÆÁ¢∫Ë™ç
      const otherUsers = editingUsers.filter(user => String(user.userId) !== String(currentUserId));
      console.log('[DEBUG] weekly-report.tsx: filtered other users:', {
        totalUsers: editingUsers.length,
        otherUsersCount: otherUsers.length,
        otherUsers: otherUsers.map(u => ({ userId: u.userId, username: u.username }))
      });
    }
  }, [editingUsers, currentUserId]);

  // „Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥„Ç¨„Éº„Éâ„ÅÆ„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó
  const handleNavigationAttempt = async (targetPath: string): Promise<NavigationGuardAction> => {
    return new Promise((resolve) => {
      setNavigationDialog({
        open: true,
        targetPath,
        resolve,
      });
    });
  };

  const handleNavigationAction = async (action: NavigationGuardAction) => {
    if (!navigationDialog) return;

    // „ÉÄ„Ç§„Ç¢„É≠„Ç∞„ÇíÂç≥Â∫ß„Å´Èñâ„Åò„Çã
    setNavigationDialog(null);

    if (action === "save") {
      setIsSavingForNavigation(true);
      try {
        const success = await handleImmediateSave();
        navigationDialog.resolve(success ? "save" : "cancel");
      } catch (error) {
        console.error("Save failed:", error);
        navigationDialog.resolve("cancel");
      } finally {
        setIsSavingForNavigation(false);
      }
    } else {
      // discard „ÇÑ cancel „ÅÆÂ†¥Âêà„ÅØÂç≥Â∫ß„Å´ resolve
      navigationDialog.resolve(action);
    }
  };

  // Ë©≥Á¥∞„Å™Á´∂ÂêàËß£Ê±∫„ÅÆ„Åü„ÇÅ„ÅÆ„Çµ„Éº„Éê„Éº„Éá„Éº„ÇøÂèñÂæó
  const fetchServerDataForConflict = async () => {
    if (!reportId) {
      console.error('‚ùå [weekly-report] No reportId available for server data fetch');
      return { success: false, error: '„É¨„Éù„Éº„ÉàID„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì' };
    }
    
    console.log('üîç [weekly-report] Fetching server data for detailed conflict resolution...');
    try {
      const { apiRequest } = await import("@/lib/queryClient");
      const serverData = await apiRequest(`/api/weekly-reports/${reportId}`, { method: "GET" });
      console.log('‚úÖ [weekly-report] Successfully fetched server data for detailed conflict resolution');
      return { success: true, data: serverData };
    } catch (error) {
      console.error('‚ùå [weekly-report] Failed to fetch server data for detailed conflict resolution:', {
        error: error instanceof Error ? error.message : 'Unknown error',
        reportId,
        timestamp: new Date().toISOString()
      });
      return { 
        success: false, 
        error: error instanceof Error ? error.message : '„Çµ„Éº„Éê„Éº„Å®„ÅÆÈÄö‰ø°„Å´Â§±Êïó„Åó„Åæ„Åó„Åü'
      };
    }
  };

  // Á´∂ÂêàËß£Ê±∫„Éè„É≥„Éâ„É©„Éº
  const handleConflictResolve = async (resolution: 'reload' | 'override' | 'merge' | 'detailed') => {
    console.log('üî• [weekly-report] Handling conflict resolution:', resolution);

    if (resolution === 'detailed') {
      console.log('üî• [weekly-report] Setting transition flag for detailed conflict resolution');
      setIsTransitioningToDetailedConflict(true);
      
      // Â∞è„Åï„Å™ÈÅÖÂª∂„ÇíËøΩÂä†„Åó„Å¶„Éï„É©„Ç∞„ÅåÁ¢∫ÂÆü„Å´Ë®≠ÂÆö„Åï„Çå„Çã„Çà„ÅÜ„Å´„Åô„Çã
      await new Promise(resolve => setTimeout(resolve, 10));
      
      // Ë©≥Á¥∞„Å™Á´∂ÂêàËß£Ê±∫„ÉÄ„Ç§„Ç¢„É≠„Ç∞„ÇíË°®Á§∫
      const result = await fetchServerDataForConflict();
      if (result.success && result.data) {
        setConflictServerData(result.data);
        setShowDetailedConflictDialog(true);
        console.log('‚úÖ [weekly-report] Successfully opened detailed conflict resolution dialog');
        // Ë©≥Á¥∞„ÉÄ„Ç§„Ç¢„É≠„Ç∞„ÅåÈñã„ÅÑ„Åü„ÅÆ„Åß„Éï„É©„Ç∞„Çí„É™„Çª„ÉÉ„Éà
        setIsTransitioningToDetailedConflict(false);
      } else {
        // „Çµ„Éº„Éê„Éº„Éá„Éº„ÇøÂèñÂæóÂ§±ÊïóÊôÇ„ÅØ„Ç®„É©„Éº„ÇíË°®Á§∫„Åó„ÄÅÁ∞°Âçò„Å™ÈÅ∏ÊäûËÇ¢„Å´Êàª„Çã
        console.warn('‚ö†Ô∏è [weekly-report] Server data fetch failed, showing error to user:', result.error);
        setIsTransitioningToDetailedConflict(false);
        toast({
          title: "Ë©≥Á¥∞ÊÉÖÂ†±„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü",
          description: result.error || "„Çµ„Éº„Éê„Éº„Å®„ÅÆÈÄö‰ø°„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇÂü∫Êú¨ÁöÑ„Å™ÈÅ∏ÊäûËÇ¢„Çí„Åä‰Ωø„ÅÑ„Åè„Å†„Åï„ÅÑ„ÄÇ",
          variant: "destructive",
        });
        // „É™„É≠„Éº„Éâ„Åß„ÅØ„Å™„Åè„ÄÅ„ÉÄ„Ç§„Ç¢„É≠„Ç∞„ÇíÈñâ„Åò„Å¶Âü∫Êú¨ÁöÑ„Å™ÈÅ∏ÊäûËÇ¢„ÅßÁ∂öË°å
        // „É¶„Éº„Ç∂„Éº„ÅåÂÜçÂ∫¶Ë©≥Á¥∞Á¢∫Ë™ç„ÇíÈÅ∏Êäû„Åô„Çã„Åì„Å®„ÅØÂèØËÉΩ
        return;
      }
    } else {
      // ÂæìÊù•„ÅÆËß£Ê±∫ÊñπÊ≥ï
      resolveConflict(resolution);
    }
  };

  // Ë©≥Á¥∞Á´∂ÂêàËß£Ê±∫„Åã„Çâ„ÅÆÊúÄÁµÇËß£Ê±∫„Éè„É≥„Éâ„É©„Éº
  const handleDetailedConflictResolve = (resolvedData: WeeklyReport) => {
    console.log('üî• [weekly-report] Applying detailed conflict resolution:', resolvedData);
    
    // „Éï„Ç©„Éº„É†„Å´Ëß£Ê±∫„Åï„Çå„Åü„Éá„Éº„Çø„ÇíÈÅ©Áî®
    Object.keys(resolvedData).forEach((key) => {
      const fieldKey = key as keyof WeeklyReport;
      if (form.getValues()[fieldKey] !== undefined) {
        form.setValue(fieldKey as any, resolvedData[fieldKey]);
      }
    });
    
    // Á´∂ÂêàÁä∂ÊÖã„Çí„ÇØ„É™„Ç¢
    resolveConflict('merge');
    setShowDetailedConflictDialog(false);
    setConflictServerData(null);
    setIsTransitioningToDetailedConflict(false);
  };

  // Ë©≥Á¥∞Á´∂ÂêàËß£Ê±∫„ÉÄ„Ç§„Ç¢„É≠„Ç∞„Åß„ÅÆ„É™„É≠„Éº„Éâ
  const handleDetailedConflictReload = () => {
    console.log('üîÑ [weekly-report] User chose reload from detailed conflict dialog');
    setShowDetailedConflictDialog(false);
    setConflictServerData(null);
    setIsTransitioningToDetailedConflict(false);
    resolveConflict('reload');
  };

  // Ë©≥Á¥∞Á´∂ÂêàËß£Ê±∫„ÉÄ„Ç§„Ç¢„É≠„Ç∞„Åå„Ç≠„É£„É≥„Çª„É´„Åï„Çå„ÅüÂ†¥Âêà
  const handleDetailedConflictCancel = () => {
    console.log('‚ùå [weekly-report] User cancelled detailed conflict dialog');
    setShowDetailedConflictDialog(false);
    setConflictServerData(null);
    setIsTransitioningToDetailedConflict(false);
    // Á´∂ÂêàÁä∂ÊÖã„ÅØÁ∂≠ÊåÅ„Åó„Å¶„ÄÅ„É¶„Éº„Ç∂„Éº„ÅåÂü∫Êú¨ÁöÑ„Å™ÈÅ∏ÊäûËÇ¢„Åã„ÇâÂÜçÈÅ∏Êäû„Åß„Åç„Çã„Çà„ÅÜ„Å´„Åô„Çã
  };

  console.log("üîç Weekly Report - Navigation guard state:", { 
    formChanged, 
    isSubmitting, 
    shouldBlock: formChanged && !isSubmitting 
  });

  useNavigationGuard({
    shouldBlock: formChanged && !isSubmitting,
    onNavigationAttempt: handleNavigationAttempt,
  });


  if (isLoadingReport || isLoadingCases) {
    return (
      <div className="min-h-screen bg-background">
        <div className="container mx-auto px-2 sm:px-4 py-4 sm:py-8">
          <p className="text-center">Ë™≠„ÅøËæº„Åø‰∏≠...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-background">
      <FormProvider {...form}>
        <ReportHeader
          isEditMode={isEditMode}
          isAdminEditMode={isAdminEditMode ?? false}
          reportId={reportId}
          isAutosaving={isAutosaving}
          formChanged={formChanged}
          lastSavedTime={lastSavedTime}
          selectedCaseId={selectedCaseId}
          editingUsers={editingUsers}
          currentUserId={currentUserId || undefined}
          onManualAutoSave={handleManualAutoSave}
          onCopyFromLastReport={copyFromLastReport}
          onShowMilestoneDialog={() => setShowMilestoneDialog(true)}
          onShowSampleDialog={() => setShowSampleDialog(true)}
        />
        <div className="container mx-auto px-2 sm:px-4 max-w-4xl pb-4 sm:pb-2">
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6 sm:space-y-8">
            <BasicInfoForm
              cases={cases || []}
              selectedCaseId={selectedCaseId}
              onSelectCase={setSelectedCaseId}
            />
            <TaskDetailsSection
              latestReport={latestReport}
              existingReport={existingReport}
              aiAnalysis={aiAnalysisHook}
            />
            
            {isEditMode && existingReport?.aiAnalysis && (
              <Card>
                <CardContent className="p-6">
                  <h2 className="text-xl font-semibold mb-4 pb-2 border-b">
                    ‚ñ† AIÂàÜÊûêÁµêÊûú
                  </h2>
                  <div className="prose prose-sm max-w-none">
                    <ReactMarkdown remarkPlugins={[remarkGfm]} rehypePlugins={[rehypeRaw]}>{existingReport.aiAnalysis}</ReactMarkdown>
                  </div>
                </CardContent>
              </Card>
            )}

            <MeetingMinutes
              meetings={meetingMinutesHook.meetings || []}
              editingMeetings={meetingMinutesHook.editingMeetings}
              isUpdating={meetingMinutesHook.isUpdating}
              onStartEditing={meetingMinutesHook.startEditingMeeting}
              onCancelEditing={meetingMinutesHook.cancelEditingMeeting}
              onSave={meetingMinutesHook.saveMeeting}
              onUpdateField={meetingMinutesHook.updateMeetingField}
            />

            {isAdminEditMode && (
              <Card>
                <CardContent className="p-6">
                  <h2 className="text-xl font-semibold mb-4 pb-2 border-b">
                    ‚ñ† ÁÆ°ÁêÜËÄÖÁ¢∫Ë™ç„É°„Éº„É´ÊñáÁ´†
                  </h2>
                  <p className="text-sm text-muted-foreground mb-4">
                    „É™„Éº„ÉÄ„Éº„Å´‰∏çÊòéÁÇπ„ÇíÁöÑÁ¢∫„Å´„Ç∑„É≥„Éó„É´„Å´Á¢∫Ë™ç„Åô„Çã„Åü„ÇÅ„ÅÆ„É°„Éº„É´ÊñáÁ´†„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
                  </p>
                  <div className="space-y-4">
                    <div>
                      <FormField
                        control={form.control}
                        name="adminConfirmationEmail"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>„É°„Éº„É´ÊñáÁ´†</FormLabel>
                            <FormControl>
                              <Textarea
                                placeholder="‰ª∂Âêç: ÈÄ±Ê¨°Â†±Âëä„Å´„Å§„ÅÑ„Å¶Á¢∫Ë™ç‰∫ãÈ†Ö„Åå„ÅÇ„Çä„Åæ„Åô&#10;&#10;„ÅäÁñ≤„ÇåÊßò„Åß„Åô„ÄÇ&#10;&#10;ÈÄ±Ê¨°Â†±Âëä„ÇíÁ¢∫Ë™ç„Åï„Åõ„Å¶„ÅÑ„Åü„Å†„Åç„Åæ„Åó„Åü„Åå„ÄÅ‰ª•‰∏ã„ÅÆÁÇπ„Å´„Å§„ÅÑ„Å¶Á¢∫Ë™ç„Åó„Åü„ÅÑ„Åì„Å®„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ&#10;&#10;„ÄêÁ¢∫Ë™ç‰∫ãÈ†Ö„Äë&#10;- „Äá„Äá„Å´„Å§„ÅÑ„Å¶Ë©≥Á¥∞„ÇíÊïô„Åà„Å¶„Åè„Å†„Åï„ÅÑ&#10;- ‚ñ≥‚ñ≥„ÅÆÈÄ≤ÊçóÁä∂Ê≥Å„ÅØ„ÅÑ„Åã„Åå„Åß„Åó„Çá„ÅÜ„Åã&#10;&#10;„ÅäÂøô„Åó„ÅÑ‰∏≠ÊÅêÁ∏Æ„Åß„Åô„Åå„ÄÅ„ÅîÂõûÁ≠î„Çí„ÅäÈ°ò„ÅÑ„ÅÑ„Åü„Åó„Åæ„Åô„ÄÇ"
                                className="min-h-32"
                                value={field.value ?? ""}
                                onChange={field.onChange}
                                onBlur={(e) => {
                                  field.onBlur();
                                  // AIÂàÜÊûê„ÇíÂÆüË°å
                                  if (e.target.value && aiAnalysisHook.analyzeField) {
                                    aiAnalysisHook.analyzeField('adminConfirmationEmail', e.target.value);
                                  }
                                }}
                              />
                            </FormControl>
                          </FormItem>
                        )}
                      />
                    </div>
                    {aiAnalysisHook.getAnalysisState('adminConfirmationEmail')?.isLoading && (
                      <div className="text-sm text-muted-foreground">
                        AIÂàÜÊûê‰∏≠...
                      </div>
                    )}
                    {aiAnalysisHook.getAnalysisState('adminConfirmationEmail')?.analysis && (
                      <AIAnalysisResult
                        fieldName="adminConfirmationEmail"
                        analysis={aiAnalysisHook.getAnalysisState('adminConfirmationEmail')?.analysis || ''}
                        isLoading={aiAnalysisHook.getAnalysisState('adminConfirmationEmail')?.isLoading ?? false}
                        error={aiAnalysisHook.getAnalysisState('adminConfirmationEmail')?.error || null}
                        onClear={() => aiAnalysisHook.clearAnalysis('adminConfirmationEmail')}
                        onRegenerate={() => aiAnalysisHook.regenerateAnalysis('adminConfirmationEmail', form.getValues('adminConfirmationEmail') ?? '')}
                        conversations={aiAnalysisHook.getAnalysisState('adminConfirmationEmail')?.conversations}
                        isConversationLoading={aiAnalysisHook.getAnalysisState('adminConfirmationEmail')?.isConversationLoading}
                        onSendMessage={(message) => aiAnalysisHook.sendMessage('adminConfirmationEmail', message)}
                        onClearConversations={() => aiAnalysisHook.clearConversations('adminConfirmationEmail')}
                      />
                    )}
                  </div>
                </CardContent>
              </Card>
            )}

            <div className="flex justify-end mt-8 mb-16 sm:mb-8">
              <Button
                type="submit"
                className={`flex items-center gap-2 ${
                  isAdminEditMode ?? false ? "bg-red-600 hover:bg-red-700" : ""
                }`}
                disabled={isSubmitting}
              >
                {isAdminEditMode ? (
                  <ShieldCheck className="h-4 w-4" />
                ) : (
                  <Send className="h-4 w-4" />
                )}
                {isSubmitting 
                  ? "Âá¶ÁêÜ‰∏≠..." 
                  : isAdminEditMode 
                  ? "‰øÆÊ≠£ÂÆå‰∫Ü„ÉªË≠∞‰∫ãÈå≤ÁîüÊàê" 
                  : isEditMode 
                  ? "Êõ¥Êñ∞" 
                  : "ÈÄÅ‰ø°"
                }
              </Button>
            </div>
          </form>
        </div>
      </FormProvider>

      <MilestoneDialog
        open={showMilestoneDialog}
        onOpenChange={setShowMilestoneDialog}
        milestone={cases?.find(c => c.id === selectedCaseId)?.milestone || ""}
        projectName={cases?.find(c => c.id === selectedCaseId)?.projectName || ""}
        caseName={cases?.find(c => c.id === selectedCaseId)?.caseName || ""}
      />
      <SampleReportDialog
        open={showSampleDialog}
        onOpenChange={setShowSampleDialog}
      />

      <NavigationConfirmDialog
        open={navigationDialog?.open ?? false}
        onAction={handleNavigationAction}
        targetPath={navigationDialog?.targetPath}
        isSaving={isSavingForNavigation}
      />

      <VersionConflictDialog
        open={hasVersionConflict && !showDetailedConflictDialog}
        onOpenChange={() => {
          // onOpenChange„Åß„ÅØ‰Ωï„ÇÇÂá¶ÁêÜ„Åó„Å™„ÅÑ
          // „ÉÄ„Ç§„Ç¢„É≠„Ç∞„ÅÆÂà∂Âæ°„ÅØÂêÑËß£Ê±∫ÊñπÊ≥ï„ÅÆ„Éú„Çø„É≥„ÅßÊòéÁ§∫ÁöÑ„Å´Ë°å„ÅÜ
          console.log('üî• [weekly-report] VersionConflictDialog onOpenChange called - no action taken');
        }}
        conflictDetails={conflictDetails}
        onResolve={handleConflictResolve}
        onCancel={() => {
          console.log('üî• [weekly-report] VersionConflictDialog cancel requested');
          clearConflictState();
        }}
      />
      
      {/* Ë©≥Á¥∞„Å™Á´∂ÂêàËß£Ê±∫„ÉÄ„Ç§„Ç¢„É≠„Ç∞ */}
      {conflictServerData && (
        <ConflictResolutionDialog
          open={showDetailedConflictDialog}
          onOpenChange={(open) => {
            if (!open) {
              handleDetailedConflictCancel();
            }
          }}
          localData={form.getValues() as any}
          serverData={conflictServerData}
          serverUsername="‰ªñ„ÅÆ„É¶„Éº„Ç∂„Éº"
          onResolve={handleDetailedConflictResolve}
          onReload={handleDetailedConflictReload}
        />
      )}
    </div>
  );
}
