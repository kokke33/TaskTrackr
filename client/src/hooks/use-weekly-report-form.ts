import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { insertWeeklyReportSchema, type WeeklyReport, type Case } from "@shared/schema";
import { useToast } from "@/hooks/use-toast";
import { useState, useEffect, useCallback, useRef } from "react";
import { useLocation } from "wouter";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { useAuth } from "@/lib/auth";
import { useWebSocket } from "@/contexts/useWebSocket";

type UseWeeklyReportFormProps = {
  id?: string;
  latestVersionFromAutoSave?: number;
};

export function useWeeklyReportForm({ id, latestVersionFromAutoSave }: UseWeeklyReportFormProps) {
  const isEditMode = !!id;
  const reportId = id ? parseInt(id) : undefined;
  const { user } = useAuth();
  const [location, setLocation] = useLocation();
  const urlParams = new URLSearchParams(window.location.search);
  const isAdminEditMode = urlParams.get('adminEdit') === 'true' && user?.isAdmin;
  const queryClient = useQueryClient();
  const { onDataUpdate } = useWebSocket();
  
  // „Éï„Ç©„Éº„Ç´„ÇπÂæ©Â∏∞ÊôÇ„ÅÆÁâàÊï∞„ÉÅ„Çß„ÉÉ„ÇØÁî®„ÅÆÁä∂ÊÖã
  const [hasVersionConflict, setHasVersionConflict] = useState(false);
  const [conflictDetails, setConflictDetails] = useState<{
    currentVersion: number;
    serverVersion: number;
  } | null>(null);
  const lastFocusTime = useRef<number>(Date.now());

  const { data: existingReport, isLoading: isLoadingReport } = useQuery<WeeklyReport>({
    queryKey: [`/api/weekly-reports/${id}`],
    enabled: isEditMode,
  });

  const { data: cases, isLoading: isLoadingCases } = useQuery<Case[]>({
    queryKey: ["/api/cases"],
    staleTime: 0,
  });

  const { toast } = useToast();
  const [selectedCaseId, setSelectedCaseId] = useState<number | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [originalData, setOriginalData] = useState<WeeklyReport | null>(null);
  const [currentVersion, setCurrentVersion] = useState<number>(1);

  const form = useForm<WeeklyReport>({
    resolver: zodResolver(insertWeeklyReportSchema),
    defaultValues: {
      caseId: 0,
      progressRate: 0,
      delayIssues: "no",
      newRisks: "no",
      qualityConcerns: "none",
      changes: "no",
      resourceConcerns: "none",
      customerIssues: "none",
      environmentIssues: "none",
      costIssues: "none",
      knowledgeIssues: "none",
      trainingIssues: "none",
      urgentIssues: "none",
      businessOpportunities: "none",
      reportPeriodStart: "",
      reportPeriodEnd: "",
      reporterName: "",
      weeklyTasks: "",
      progressStatus: "",
      issues: "",
      nextWeekPlan: "",
      supportRequests: "",
      delayDetails: "",
      riskSummary: "",
      riskCountermeasures: "",
      riskLevel: "",
      qualityDetails: "",
      testProgress: "",
      changeDetails: "",
      resourceDetails: "",
      customerDetails: "",
      environmentDetails: "",
      costDetails: "",
      knowledgeDetails: "",
      trainingDetails: "",
      urgentDetails: "",
      businessDetails: "",
      adminConfirmationEmail: "",
    },
  });

  const { data: latestReport, isLoading: isLoadingLatest } = useQuery<WeeklyReport>({
    queryKey: [`/api/weekly-reports/previous/${selectedCaseId}`, reportId, existingReport?.reportPeriodStart],
    queryFn: async () => {
      let reportPeriodStart: string | undefined;
      if (isEditMode && existingReport) {
        reportPeriodStart = existingReport.reportPeriodStart;
      } else {
        reportPeriodStart = form.getValues("reportPeriodStart");
      }
      if (!reportPeriodStart) {
        const excludeParam = reportId ? `?excludeId=${reportId}` : '';
        return apiRequest(`/api/weekly-reports/latest/${selectedCaseId}${excludeParam}`, { method: "GET" });
      }
      const params = new URLSearchParams({ beforeDate: reportPeriodStart });
      if (reportId) {
        params.append('excludeId', reportId.toString());
      }
      return apiRequest(`/api/weekly-reports/previous/${selectedCaseId}?${params.toString()}`, { method: "GET" });
    },
    enabled: !!selectedCaseId && (!isEditMode || (!!existingReport && !!existingReport.reportPeriodStart)),
  });

  // „Åì„ÅÆ useEffect „ÅØÊñ∞„Åó„ÅÑ„Éâ„É©„Éï„ÉàÂæ©ÂÖÉÊ©üËÉΩ„Å´Áµ±Âêà„Åï„Çå„Åæ„Åó„Åü

  useEffect(() => {
    if (isAdminEditMode && isEditMode) {
      const storedOriginalData = sessionStorage.getItem(`adminEdit_original_${id}`);
      if (storedOriginalData) {
        try {
          const parsedData = JSON.parse(storedOriginalData);
          setOriginalData(parsedData);
          toast({
            title: "ÁÆ°ÁêÜËÄÖÁ∑®ÈõÜ„É¢„Éº„Éâ",
            description: "ÁÆ°ÁêÜËÄÖÁ∑®ÈõÜ„É¢„Éº„Éâ„ÅåÊúâÂäπ„Å´„Å™„Çä„Åæ„Åó„Åü",
          });
        } catch (error) {
          console.error('Failed to parse stored original data:', error);
          toast({
            title: "„Ç®„É©„Éº",
            description: "ÂÖÉ„Éá„Éº„Çø„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü",
            variant: "destructive",
          });
        }
      } else {
        toast({
          title: "„Ç®„É©„Éº",
          description: "ÁÆ°ÁêÜËÄÖÁ∑®ÈõÜ„É¢„Éº„Éâ„ÅÆÊ∫ñÂÇô„Åå„Åß„Åç„Å¶„ÅÑ„Åæ„Åõ„Çì",
          variant: "destructive",
        });
        setLocation(`/reports/${id}`);
      }
    }
  }, [isAdminEditMode, isEditMode, id, setLocation, toast]);

  // ‰∏ÄÊôÇ‰øùÂ≠òÊ©üËÉΩ
  const saveFormData = useCallback(() => {
    if (!reportId) return;
    
    const formData = form.getValues();
    const saveKey = `weekly-report-draft-${reportId}`;
    
    try {
      localStorage.setItem(saveKey, JSON.stringify({
        data: formData,
        timestamp: Date.now(),
        version: existingReport?.version
      }));
    } catch (error) {
      console.error('Failed to save draft:', error);
    }
  }, [form, reportId, existingReport?.version]);

  const loadFormData = useCallback(() => {
    if (!reportId) return false;
    
    const saveKey = `weekly-report-draft-${reportId}`;
    
    try {
      const saved = localStorage.getItem(saveKey);
      if (!saved) return false;
      
      const { data, timestamp, version } = JSON.parse(saved);
      
      // 1ÊôÇÈñì‰ª•‰∏äÂè§„ÅÑ„Éâ„É©„Éï„Éà„ÅØÁÑ°Ë¶ñ
      if (Date.now() - timestamp > 60 * 60 * 1000) {
        localStorage.removeItem(saveKey);
        return false;
      }
      
      // „Éê„Éº„Ç∏„Éß„É≥„ÅåÁï∞„Å™„ÇãÂ†¥Âêà„ÅØÁÑ°Ë¶ñÔºà„Éá„Éº„Çø„ÅåÊõ¥Êñ∞„Åï„Çå„ÅüÔºâ
      if (existingReport && version !== existingReport.version) {
        localStorage.removeItem(saveKey);
        return false;
      }
      
      // „Éï„Ç©„Éº„É†„Éá„Éº„Çø„ÇíÂæ©ÂÖÉ
      Object.entries(data).forEach(([key, value]) => {
        form.setValue(key as keyof WeeklyReport, value as any);
      });
      
      toast({
        title: "„Éâ„É©„Éï„Éà„ÇíÂæ©ÂÖÉ„Åó„Åæ„Åó„Åü",
        description: "ÂâçÂõû„ÅÆÁ∑®ÈõÜÂÜÖÂÆπ„ÇíÂæ©ÂÖÉ„Åó„Åæ„Åó„Åü„ÄÇ",
      });
      
      return true;
    } catch (error) {
      console.error('Failed to load draft:', error);
      return false;
    }
  }, [form, reportId, existingReport?.version, toast]);

  const clearFormData = useCallback(() => {
    if (!reportId) return;
    
    const saveKey = `weekly-report-draft-${reportId}`;
    localStorage.removeItem(saveKey);
  }, [reportId]);

  // ÁâàÊï∞„ÉÅ„Çß„ÉÉ„ÇØÊ©üËÉΩ
  const checkVersionConflict = useCallback(async () => {
    console.log('üî• [use-weekly-report-form] checkVersionConflict called', { 
      isEditMode, 
      reportId, 
      existingReportVersion: existingReport?.version 
    });
    
    if (!isEditMode || !reportId || !existingReport) {
      console.log('üî• [use-weekly-report-form] checkVersionConflict skipped - missing prerequisites');
      return;
    }

    try {
      console.log('üî• [use-weekly-report-form] Fetching server report version');
      const serverReport = await apiRequest(`/api/weekly-reports/${reportId}`, { method: "GET" });
      
      console.log('üî• [use-weekly-report-form] Version comparison:', { 
        serverVersion: serverReport.version, 
        currentVersion: existingReport.version 
      });
      
      if (serverReport.version !== existingReport.version) {
        console.log('üî• [use-weekly-report-form] Version conflict detected! Setting conflict details');
        
        setHasVersionConflict(true);
        setConflictDetails({
          currentVersion: existingReport.version,
          serverVersion: serverReport.version
        });
        
        console.log('üî• [use-weekly-report-form] Conflict details set:', {
          currentVersion: existingReport.version,
          serverVersion: serverReport.version
        });
        
        toast({
          title: "„Éá„Éº„Çø„ÅåÊõ¥Êñ∞„Åï„Çå„Å¶„ÅÑ„Åæ„Åô",
          description: "‰ªñ„ÅÆ„É¶„Éº„Ç∂„Éº„Åå„Åì„ÅÆ„É¨„Éù„Éº„Éà„ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„Åü„ÄÇÊúÄÊñ∞Áâà„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
          variant: "destructive",
        });
      } else {
        console.log('üî• [use-weekly-report-form] No version conflict detected');
      }
    } catch (error) {
      console.error('üî• [use-weekly-report-form] Version check failed:', error);
    }
  }, [isEditMode, reportId, existingReport, toast]);

  // „Éï„Ç©„Éº„Ç´„ÇπÂæ©Â∏∞ÊôÇ„ÅÆÁâàÊï∞„ÉÅ„Çß„ÉÉ„ÇØ
  useEffect(() => {
    const handleFocus = () => {
      const now = Date.now();
      const timeSinceLastFocus = now - lastFocusTime.current;
      
      // 5ÂàÜ‰ª•‰∏äÈùû„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Å†„Å£„ÅüÂ†¥Âêà„ÅØÁâàÊï∞„ÉÅ„Çß„ÉÉ„ÇØ„ÇíÂÆüË°å
      if (timeSinceLastFocus > 5 * 60 * 1000) {
        checkVersionConflict();
      }
      
      lastFocusTime.current = now;
    };

    const handleBlur = () => {
      lastFocusTime.current = Date.now();
      // „Éï„Ç©„Éº„Ç´„Çπ„ÅåÈõ¢„Çå„ÇãÊôÇ„Å´„Éâ„É©„Éï„Éà„Çí‰øùÂ≠ò
      saveFormData();
    };

    window.addEventListener('focus', handleFocus);
    window.addEventListener('blur', handleBlur);
    
    return () => {
      window.removeEventListener('focus', handleFocus);
      window.removeEventListener('blur', handleBlur);
    };
  }, [checkVersionConflict, saveFormData]);

  // ÂàùÂõûË™≠„ÅøËæº„ÅøÊôÇ„Å´„Éâ„É©„Éï„Éà„ÇíÂæ©ÂÖÉ
  useEffect(() => {
    if (isEditMode && existingReport && !hasVersionConflict) {
      // Êó¢Â≠ò„Éá„Éº„Çø„Åå„É≠„Éº„Éâ„Åï„Çå„ÅüÂæå„Åß„Éâ„É©„Éï„Éà„ÇíÂæ©ÂÖÉ„ÇíË©¶Ë°å
      const hasRestored = loadFormData();
      if (!hasRestored) {
        // „Éâ„É©„Éï„Éà„Åå„Å™„ÅÑÂ†¥Âêà„ÅØÊó¢Â≠ò„Éá„Éº„Çø„Åß„Éï„Ç©„Éº„É†„ÇíÂàùÊúüÂåñ
        Object.entries(existingReport).forEach(([key, value]) => {
          const formValue = value === null || value === undefined ? "" : value;
          form.setValue(key as keyof WeeklyReport, formValue);
        });
        setSelectedCaseId(existingReport.caseId);
      }
    }
  }, [isEditMode, existingReport, hasVersionConflict, loadFormData, form]);

  // WebSocketÈÄöÁü•„Åß„ÅÆ„Éá„Éº„ÇøÊõ¥Êñ∞„ÇíÂá¶ÁêÜ
  useEffect(() => {
    if (!onDataUpdate || !reportId) return;

    const handleDataUpdate = (notifiedReportId: number, updatedBy: string, newVersion: number) => {
      // ÁèæÂú®Á∑®ÈõÜ‰∏≠„ÅÆ„É¨„Éù„Éº„Éà„ÅÆÊõ¥Êñ∞ÈÄöÁü•„ÅÆÂ†¥Âêà„ÅÆ„ÅøÂá¶ÁêÜ
      if (notifiedReportId === reportId && existingReport) {
        console.log('Received data update notification', { 
          reportId: notifiedReportId, 
          updatedBy, 
          newVersion,
          currentVersion: existingReport.version 
        });

        // „Éê„Éº„Ç∏„Éß„É≥Á´∂Âêà„Çí„ÉÅ„Çß„ÉÉ„ÇØ
        if (newVersion > existingReport.version) {
          setHasVersionConflict(true);
          setConflictDetails({
            currentVersion: existingReport.version,
            serverVersion: newVersion
          });
          
          toast({
            title: "‰ªñ„ÅÆ„É¶„Éº„Ç∂„Éº„Åå„Éá„Éº„Çø„ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„Åü",
            description: `${updatedBy}„Åï„Çì„Åå„Åì„ÅÆ„É¨„Éù„Éº„Éà„ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„Åü„ÄÇÁ´∂Âêà„ÇíËß£Ê±∫„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`,
            variant: "destructive",
          });
        }
      }
    };

    // onDataUpdate„ÅåÈñ¢Êï∞„ÅÆÂ†¥Âêà„ÅØÁõ¥Êé•Âëº„Å≥Âá∫„Åó„ÄÅ„Éó„É≠„Éë„ÉÜ„Ç£„ÅÆÂ†¥Âêà„ÅØË®≠ÂÆö
    if (typeof onDataUpdate === 'function') {
      // WebSocketProvider„ÅÆonDataUpdate„ÇíÁõ¥Êé•‰ΩøÁî®„Åô„ÇãÂ†¥Âêà„ÅÆ„Éè„ÉÉ„ÇØ
      // „Åì„ÅÆÂÆüË£Ö„Åß„ÅØ„ÄÅWebSocketProvider„Å´„Éè„É≥„Éâ„É©„ÇíË®≠ÂÆö„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„Åô
      console.warn('onDataUpdate is a function, need to implement proper subscription');
    }

    // ÁèæÂú®„ÅÆÂÆüË£Ö„Åß„ÅØ„ÄÅWebSocketProvider„ÅßonDataUpdate„Åå„Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà„Å´Âê´„Åæ„Çå„Å¶„ÅÑ„Çã„Åü„ÇÅ„ÄÅ
    // Áõ¥Êé•Âá¶ÁêÜ„Åô„Çã„Åì„Å®„ÅØ„Åß„Åç„Åæ„Åõ„Çì„ÄÇ‰ª£„Çè„Çä„Å´„ÄÅWebSocketContext„ÇíÈÄö„Åò„Å¶Âá¶ÁêÜ„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ
  }, [onDataUpdate, reportId, existingReport, toast]);

  const mutation = useMutation({
    mutationFn: async (data: WeeklyReport) => {
      if (isAdminEditMode && originalData) {
        return apiRequest(`/api/weekly-reports/${id}/admin-edit-complete`, {
          method: "PUT",
          data: { originalData, updatedData: data },
        });
      }
      const url = isEditMode ? `/api/weekly-reports/${id}` : "/api/weekly-reports";
      const method = isEditMode ? "PUT" : "POST";
      
          // Á∑®ÈõÜ„É¢„Éº„Éâ„ÅÆÂ†¥Âêà„ÅØÁèæÂú®„ÅÆ„Éê„Éº„Ç∏„Éß„É≥„ÇíÂê´„ÇÅ„Çã
      // Ëá™Âãï‰øùÂ≠ò„ÅßÊõ¥Êñ∞„Åï„Çå„ÅüÊúÄÊñ∞ÁâàÊï∞„ÇíÂÑ™ÂÖàÁöÑ„Å´‰ΩøÁî®
      let currentVersion = existingReport?.version;
      if (isEditMode && latestVersionFromAutoSave && latestVersionFromAutoSave > (existingReport?.version || 0)) {
        currentVersion = latestVersionFromAutoSave;
        console.log(`üî• [use-weekly-report-form] Using updated version from auto-save: ${latestVersionFromAutoSave} (instead of existingReport: ${existingReport?.version})`);
      }
      
      const requestData = isEditMode && currentVersion 
        ? { ...data, version: currentVersion }
        : data;
      
      console.log(`üî• [use-weekly-report-form] Final request data version: ${requestData.version || 'undefined'}`);
      
      return apiRequest(url, { method, data: requestData });
    },
    onSuccess: (result) => {
      // ÊàêÂäüÊôÇ„Å´„Éâ„É©„Éï„Éà„Çí„ÇØ„É™„Ç¢
      clearFormData();
      
      if (isAdminEditMode) {
        sessionStorage.removeItem(`adminEdit_original_${id}`);
        toast({
          title: "‰øÆÊ≠£ÂÆå‰∫Ü",
          description: "‰øÆÊ≠£„Å®Ë≠∞‰∫ãÈå≤ÁîüÊàê„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü",
        });
        // ÁÆ°ÁêÜËÄÖÁ∑®ÈõÜÂÆå‰∫ÜÊôÇ„ÅØ result.report.id „Çí‰ΩøÁî®
        setLocation(`/reports/${result.report?.id || id}`);
      } else {
        toast({
          title: isEditMode ? "Â†±Âëä„ÅåÊõ¥Êñ∞„Åï„Çå„Åæ„Åó„Åü" : "Â†±Âëä„ÅåÈÄÅ‰ø°„Åï„Çå„Åæ„Åó„Åü",
          description: isEditMode
            ? "ÈÄ±Ê¨°Â†±Âëä„ÅåÊ≠£Â∏∏„Å´Êõ¥Êñ∞„Åï„Çå„Åæ„Åó„Åü„ÄÇ"
            : "ÈÄ±Ê¨°Â†±Âëä„ÅåÊ≠£Â∏∏„Å´ÈÄÅ‰ø°„Åï„Çå„Åæ„Åó„Åü„ÄÇ",
        });
        // ÈÄöÂ∏∏„ÅÆÁ∑®ÈõÜ„Éª‰ΩúÊàêÊôÇ„ÅØ result.id „Çí‰ΩøÁî®
        setLocation(`/reports/${result.id}`);
      }
    },
    onError: async (error: any) => {
      console.log('üî• [use-weekly-report-form] onError triggered:', { error, status: error?.status });
      
      if (error?.status === 409) {
        console.log('üî• [use-weekly-report-form] 409 Conflict detected - starting new conflict resolution');
        
        // Ê•ΩË¶≥ÁöÑ„É≠„ÉÉ„ÇØÁ´∂Âêà„Ç®„É©„Éº - Á∑®ÈõÜÂÜÖÂÆπ„Çí‰∏ÄÊôÇ‰øùÂ≠ò„Åó„Å¶„Åã„ÇâÂØæÂøú
        saveFormData(); // Á´∂ÂêàÁô∫ÁîüÊôÇ„Å´Á∑®ÈõÜÂÜÖÂÆπ„Çí‰øùË≠∑
        console.log('üî• [use-weekly-report-form] Form data saved');
        
        try {
          // ÊúÄÊñ∞„ÅÆ„Çµ„Éº„Éê„Éº„Éá„Éº„Çø„ÇíÂèñÂæó
          console.log('üî• [use-weekly-report-form] Fetching latest server data for conflict resolution');
          const serverReport = await apiRequest(`/api/weekly-reports/${reportId}`, { method: "GET" });
          
          console.log('üî• [use-weekly-report-form] Setting conflict details:', {
            currentVersion: existingReport?.version,
            serverVersion: serverReport.version
          });
          
          setHasVersionConflict(true);
          setConflictDetails({
            currentVersion: existingReport?.version || 0,
            serverVersion: serverReport.version
          });
          
          toast({
            title: "„Éá„Éº„ÇøÁ´∂Âêà„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü",
            description: "‰ªñ„ÅÆ„É¶„Éº„Ç∂„Éº„Åå„Éá„Éº„Çø„ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„Åü„ÄÇÂØæÂøúÊñπÊ≥ï„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
            variant: "destructive",
            duration: 10000, // 10ÁßíÈñìË°®Á§∫
          });
          
          console.log('üî• [use-weekly-report-form] Conflict resolution setup completed');
        } catch (fetchError) {
          console.error('üî• [use-weekly-report-form] Failed to fetch server data for conflict resolution:', fetchError);
          
          // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: Âü∫Êú¨ÁöÑ„Å™Á´∂ÂêàÁä∂ÊÖã„Å†„ÅëË®≠ÂÆö
          setHasVersionConflict(true);
          setConflictDetails({
            currentVersion: existingReport?.version || 0,
            serverVersion: (existingReport?.version || 0) + 1 // Êé®ÂÆö
          });
          
          toast({
            title: "„Éá„Éº„ÇøÁ´∂Âêà„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü",
            description: "Á∑®ÈõÜÂÜÖÂÆπ„ÅØ‰øùÂ≠ò„Åï„Çå„Åæ„Åó„Åü„ÄÇÂØæÂøúÊñπÊ≥ï„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
            variant: "destructive",
            duration: 10000,
          });
        }
      } else {
        toast({
          title: "„Ç®„É©„Éº",
          description: isAdminEditMode 
            ? "ÁÆ°ÁêÜËÄÖÁ∑®ÈõÜ„ÅÆÂÆå‰∫Ü„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ"
            : isEditMode
            ? "ÈÄ±Ê¨°Â†±Âëä„ÅÆÊõ¥Êñ∞„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ"
            : "ÈÄ±Ê¨°Â†±Âëä„ÅÆÈÄÅ‰ø°„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ",
          variant: "destructive",
        });
      }
    },
    onSettled: () => {
      setIsSubmitting(false);
    },
  });

  const onSubmit = (data: WeeklyReport) => {
    if (isSubmitting) return;
    setIsSubmitting(true);
    mutation.mutate(data);
  };

  // Á´∂ÂêàËß£Ê±∫Ê©üËÉΩ
  const resolveConflict = useCallback(async (resolution: 'reload' | 'override' | 'merge' | 'detailed') => {
    if (!hasVersionConflict || !reportId) return;
    
    switch (resolution) {
      case 'reload':
        // „Éö„Éº„Ç∏„Çí„É™„É≠„Éº„Éâ„Åó„Å¶ÊúÄÊñ∞„Éá„Éº„Çø„ÇíÂèñÂæó
        window.location.reload();
        break;
        
      case 'override':
        // ÁèæÂú®„ÅÆÁ∑®ÈõÜÂÜÖÂÆπ„ÅßÂº∑Âà∂ÁöÑ„Å´‰∏äÊõ∏„Åç
        try {
          const currentFormData = form.getValues();
          const serverReport = await apiRequest(`/api/weekly-reports/${reportId}`, { method: "GET" });
          
          // ÊúÄÊñ∞„Éê„Éº„Ç∏„Éß„É≥„Çí‰ΩøÁî®„Åó„Å¶ÂÜçÈÄÅ‰ø°
          const requestData = { ...currentFormData, version: serverReport.version };
          const result = await apiRequest(`/api/weekly-reports/${reportId}`, { 
            method: "PUT", 
            data: requestData 
          });
          
          setHasVersionConflict(false);
          setConflictDetails(null);
          
          toast({
            title: "Êõ¥Êñ∞ÂÆå‰∫Ü",
            description: "Á∑®ÈõÜÂÜÖÂÆπ„Åß‰∏äÊõ∏„ÅçÊõ¥Êñ∞„Åó„Åæ„Åó„Åü„ÄÇ",
          });
          
          setLocation(`/reports/${result.id}`);
        } catch (error) {
          toast({
            title: "Êõ¥Êñ∞Â§±Êïó",
            description: "‰∏äÊõ∏„ÅçÊõ¥Êñ∞„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ",
            variant: "destructive",
          });
        }
        break;
        
      case 'merge':
        // „Éá„Éº„Çø„ÇíÊúÄÊñ∞Áâà„ÅßÊõ¥Êñ∞„Åó„ÄÅ„ÇØ„É©„Ç§„Ç¢„É≥„Éà„Ç≠„É£„ÉÉ„Ç∑„É•„Çí„É™„Éï„É¨„ÉÉ„Ç∑„É•
        await queryClient.invalidateQueries({ queryKey: [`/api/weekly-reports/${reportId}`] });
        setHasVersionConflict(false);
        setConflictDetails(null);
        
        toast({
          title: "„Éá„Éº„Çø„ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„Åü",
          description: "ÊúÄÊñ∞„ÅÆ„Éá„Éº„Çø„ÅßÁîªÈù¢„ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„Åü„ÄÇÂ§âÊõ¥ÂÜÖÂÆπ„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
        });
        break;
        
      case 'detailed':
        // Ë©≥Á¥∞„Å™Á´∂ÂêàËß£Ê±∫„ÅØ‰∏ä‰Ωç„Ç≥„É≥„Éù„Éº„Éç„É≥„ÉàÔºàweekly-report.tsxÔºâ„ÅßÂá¶ÁêÜ
        // „Åì„Åì„Åß„ÅØ‰Ωï„ÇÇ„Åó„Å™„ÅÑÔºàÁä∂ÊÖã„ÅØ„Åù„ÅÆ„Åæ„ÅæÁ∂≠ÊåÅÔºâ
        console.log('üî• [use-weekly-report-form] Detailed resolution requested - handled by parent component');
        break;
    }
  }, [hasVersionConflict, reportId, form, queryClient, toast, setLocation]);

  const copyFromLastReport = () => {
    if (!selectedCaseId || !latestReport) return;

    const fieldsToExclude = [
      "id", 
      "createdAt", 
      "updatedAt",
      "reportPeriodStart", 
      "reportPeriodEnd",
      "adminConfirmationEmail",  // ÁÆ°ÁêÜËÄÖÁ¢∫Ë™ç„É°„Éº„É´ÔºàÂêÑÂ†±Âëä„ÅßÁã¨Á´ã„Åô„Åπ„ÅçÔºâ
      "aiAnalysis",              // AIÂàÜÊûêÁµêÊûúÔºàÊñ∞„Åó„ÅÑÂ†±ÂëäÂÜÖÂÆπ„Å´Âü∫„Å•„Åè„Åπ„ÅçÔºâ
      "version"                  // Ê•ΩË¶≥ÁöÑ„É≠„ÉÉ„ÇØÁî®„Éê„Éº„Ç∏„Éß„É≥ÔºàÂêÑÂ†±Âëä„ÅßÁã¨Á´ã„Åô„Åπ„ÅçÔºâ
    ];
    Object.entries(latestReport).forEach(([key, value]) => {
      if (!fieldsToExclude.includes(key)) {
        form.setValue(key as keyof WeeklyReport, value || "");
      }
    });

    const today = new Date();
    const dayOfWeek = today.getDay();
    const monday = new Date(today);
    monday.setDate(today.getDate() - dayOfWeek + 1);
    const friday = new Date(monday);
    friday.setDate(monday.getDate() + 4);

    form.setValue("reportPeriodStart", monday.toISOString().split("T")[0]);
    form.setValue("reportPeriodEnd", friday.toISOString().split("T")[0]);

    toast({
      title: "ÂâçÂõû„ÅÆÂ†±Âëä„Çí„Ç≥„Éî„Éº„Åó„Åæ„Åó„Åü",
      description: "Â†±ÂëäÂÜÖÂÆπ„ÇíÁ¢∫Ë™ç„ÉªÁ∑®ÈõÜ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
    });
  };

  return {
    form,
    isEditMode,
    isAdminEditMode,
    reportId,
    existingReport,
    isLoadingReport,
    cases,
    isLoadingCases,
    latestReport,
    isLoadingLatest,
    selectedCaseId,
    setSelectedCaseId,
    isSubmitting,
    onSubmit,
    copyFromLastReport,
    // Á´∂ÂêàÁÆ°ÁêÜÈñ¢ÈÄ£
    hasVersionConflict,
    conflictDetails,
    resolveConflict,
    checkVersionConflict,
    // ‰∏ÄÊôÇ‰øùÂ≠òÈñ¢ÈÄ£
    saveFormData,
    loadFormData,
    clearFormData,
  };
}