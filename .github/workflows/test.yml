name: Test and Quality Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30  # 30分でタイムアウト

    strategy:
      matrix:
        node-version: [18.x, 20.x]
      fail-fast: false  # 1つのマトリックスが失敗しても他は継続

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: tasktrackr_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'

    - name: Install dependencies
      run: npm ci

    - name: Setup test environment
      run: |
        cp .env.test .env
        echo "DATABASE_URL=postgresql://test:test@localhost:5432/tasktrackr_test" >> .env
        echo "PGUSER=test" >> .env
        echo "PGPASSWORD=test" >> .env
        echo "PGHOST=localhost" >> .env
        echo "PGPORT=5432" >> .env
        echo "PGDATABASE=tasktrackr_test" >> .env

    - name: Verify database connection
      run: |
        echo "🔍 Testing database connection..."
        PGPASSWORD=test psql -h localhost -U test -d tasktrackr_test -c "SELECT 1;" || {
          echo "❌ Database connection failed"
          echo "📋 PostgreSQL status:"
          pg_isready -h localhost -p 5432
          exit 1
        }
        echo "✅ Database connection verified"

    - name: Setup database tables
      run: npm run db:push
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/tasktrackr_test

    - name: Run TypeScript check
      run: npm run check

    - name: Run tests with retry
      run: |
        echo "🧪 Running tests with retry logic..."
        for i in {1..3}; do
          echo "🔄 Test attempt $i of 3"
          if npm run test:coverage; then
            echo "✅ Tests passed on attempt $i"
            break
          else
            echo "❌ Tests failed on attempt $i"
            if [ $i -eq 3 ]; then
              echo "💥 All test attempts failed"
              exit 1
            fi
            echo "⏳ Waiting 10 seconds before retry..."
            sleep 10
          fi
        done
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/tasktrackr_test
        SESSION_SECRET: test_session_secret
        AI_PROVIDER: test
        NODE_ENV: test
        # MSW/Happy DOM環境の互換性改善
        VITEST_ENVIRONMENT: happy-dom
        VITEST_DISABLE_MSW: true

    - name: Check coverage threshold
      run: |
        echo "🔍 Checking coverage threshold..."
        coverage_file="coverage/coverage-summary.json"
        if [ ! -f "$coverage_file" ]; then
          echo "❌ Coverage file not found: $coverage_file"
          exit 1
        fi
        
        # Extract coverage percentage from JSON
        line_coverage=$(node -e "console.log(JSON.parse(require('fs').readFileSync('$coverage_file')).total.lines.pct)")
        function_coverage=$(node -e "console.log(JSON.parse(require('fs').readFileSync('$coverage_file')).total.functions.pct)")
        branch_coverage=$(node -e "console.log(JSON.parse(require('fs').readFileSync('$coverage_file')).total.branches.pct)")
        statement_coverage=$(node -e "console.log(JSON.parse(require('fs').readFileSync('$coverage_file')).total.statements.pct)")
        
        echo "📊 Coverage Report:"
        echo "   Lines: ${line_coverage}%"
        echo "   Functions: ${function_coverage}%"
        echo "   Branches: ${branch_coverage}%"
        echo "   Statements: ${statement_coverage}%"
        
        threshold=30
        if (( $(echo "$line_coverage < $threshold" | bc -l) )); then
          echo "❌ Line coverage ${line_coverage}% is below threshold ${threshold}%"
          exit 1
        fi
        
        echo "✅ All coverage metrics meet the ${threshold}% threshold"

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: true

    - name: Run build test
      run: npm run build

    - name: Security audit
      run: npm audit --audit-level=high
      continue-on-error: true

  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'

    - name: Install dependencies
      run: npm ci

    - name: TypeScript check
      run: npm run check

    - name: Check for security vulnerabilities
      run: npm audit --audit-level=moderate
      continue-on-error: true

  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
        config-file: ./.github/codeql/codeql-config.yml

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:javascript"

    - name: Dependency vulnerability scan
      run: |
        echo "🔍 Running dependency vulnerability scan..."
        npm audit --audit-level=high || {
          echo "⚠️ High or critical vulnerabilities found"
          npm audit --json > audit-results.json
          echo "📋 Audit results saved to audit-results.json"
        }

    - name: Check for audit results file
      id: check_file
      run: |
        if [ -f audit-results.json ]; then
          echo "audit_file_exists=true" >> "$GITHUB_OUTPUT"
        else
          echo "audit_file_exists=false" >> "$GITHUB_OUTPUT"
        fi

    - name: Upload audit results
      uses: actions/upload-artifact@v4
      if: ${{ steps.check_file.outputs.audit_file_exists == 'true' }}
      with:
        name: security-audit-results
        path: audit-results.json
        retention-days: 30

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.pull_request.base.ref == 'main'
    needs: lint  # lintが成功した場合のみ実行

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: tasktrackr_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'

    - name: Install dependencies
      run: npm ci

    - name: Setup database
      run: |
        cp .env.test .env
        echo "DATABASE_URL=postgresql://test:test@localhost:5432/tasktrackr_test" >> .env
        echo "PGUSER=test" >> .env
        echo "PGPASSWORD=test" >> .env
        echo "PGHOST=localhost" >> .env
        echo "PGPORT=5432" >> .env
        echo "PGDATABASE=tasktrackr_test" >> .env

    - name: Verify database connection
      run: |
        echo "🔍 Testing database connection..."
        PGPASSWORD=test psql -h localhost -U test -d tasktrackr_test -c "SELECT 1;" || {
          echo "❌ Database connection failed"
          echo "📋 PostgreSQL status:"
          pg_isready -h localhost -p 5432
          exit 1
        }
        echo "✅ Database connection verified"

    - name: Setup database tables
      run: npm run db:push
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/tasktrackr_test

    - name: Run integration tests
      run: npm run test:integration
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/tasktrackr_test
        SESSION_SECRET: test_session_secret
        AI_PROVIDER: test
        NODE_ENV: test

    - name: Build application
      run: npm run build

    - name: Test built application
      run: |
        echo "🚀 Starting application..."
        timeout 60s npm start &
        APP_PID=$!
        echo "📝 Application PID: $APP_PID"
        
        echo "⏳ Waiting for application to start..."
        sleep 15
        
        echo "🔍 Checking if application is running..."
        if ps -p $APP_PID > /dev/null; then
          echo "✅ Application process is running"
        else
          echo "❌ Application process is not running"
          exit 1
        fi
        
        echo "🌐 Testing health check endpoint..."
        for i in {1..5}; do
          if curl -f http://localhost:5000 > /dev/null 2>&1; then
            echo "✅ Health check passed on attempt $i"
            break
          else
            echo "⏳ Health check failed on attempt $i, retrying in 3 seconds..."
            sleep 3
            if [ $i -eq 5 ]; then
              echo "❌ Health check failed after 5 attempts"
              echo "📋 Application logs:"
              jobs
              exit 1
            fi
          fi
        done
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/tasktrackr_test
        SESSION_SECRET: test_session_secret
        AI_PROVIDER: test
        NODE_ENV: production
        PORT: 5000
